from sqlalchemy.ext.asyncio import AsyncSession
from core.models import WeekTypeEnum, db_helper
from core.schemas import UserSchema
from services.rag.main import prepare_ai_request
from crud.plan import *
import json

import logging
logger = logging.getLogger(__name__)

async def generate_weekly_plan_for_user(user_data, activity, week, websocket=None):
    async with db_helper.session_getter() as session:
        try:
            if websocket:
                await websocket.send_json({"detail": "üì• –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞..."})

            personal_data = {
                "sex": user_data.sex,
                "age": user_data.age,
                "height": user_data.height,
                "weight": user_data.weight,
                "training_goal": user_data.training_goal,
            }

            message = user_data.message or None
            week_type = WeekTypeEnum.this_week if week == "this" else WeekTypeEnum.next_week

            if activity == "editPlan":
                if websocket:
                    await websocket.send_json({"detail": "üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω..."})
                temp_json = await get_plan(session, user_data.id, week_type)

                if websocket:
                    await websocket.send_json({"detail": "ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."})
                plan = await prepare_ai_request(activity, personal_data, temp_json, message)

            elif activity == "createTodayPlan":
                if websocket:
                    await websocket.send_json({"detail": "üìÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è..."})
                plan = await prepare_ai_request(activity, personal_data)

            else:
                if websocket:
                    await websocket.send_json({"detail": "üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–Ω —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏..."})
                temp_json = await get_plan(session, user_data.id, WeekTypeEnum.next_week)

                if websocket:
                    await websocket.send_json({"detail": "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞..."})
                plan = await prepare_ai_request(activity, personal_data, temp_json)

            if isinstance(plan, str):
                plan = json.loads(plan)

            if websocket:
                await websocket.send_json({"detail": "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑—É..."})

            await save_weekly_plan_to_db(user_data.id, plan, week_type, session)

            if websocket:
                await websocket.send_json({"detail": "‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!"})

        except Exception as e:
            if websocket:
                try:
                    await websocket.send_json({"detail": f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"})
                except:
                    pass
            raise
    